# self_assembler.py
# Version: v1.1
# Purpose: Auto-assemble Victor's brain from raw modules and output victor_brain_v1.py

import os
import re
from pathlib import Path

CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
OUTPUT_FILE = os.path.join(CURRENT_DIR, 'victor_brain_v1.py')

# Define keyword-based category mapping
CATEGORY_KEYWORDS = {
    'soul': ['soul', 'identity', 'emotion'],
    'memory': ['memory', 'cache', 'HFM'],
    'attention': ['attention', 'focus', 'quantum'],
    'fractal_core': ['fractal', 'cmffs', 'FCE', 'pattern'],
    'evolution_engine': ['evolve', 'mutate', 'warp', 'grow'],
    'parser': ['parser', 'nlp'],
    'reasoning': ['reason', 'logic', 'reflective']
}

# Identify function or class entry points (default fallback: run)
def detect_entry_point(file_content):
    match = re.search(r'def\s+(\w+)\s*\(', file_content)
    if match:
        return match.group(1)
    match = re.search(r'class\s+(\w+)\s*\(', file_content)
    if match:
        return match.group(1)
    return "run"

# Classify based on keywords
def classify_module(filename, content):
    lower_content = content.lower()
    for category, keywords in CATEGORY_KEYWORDS.items():
        if any(kw.lower() in filename.lower() or kw.lower() in lower_content for kw in keywords):
            return category
    return "misc"

# Begin scanning + building
def build_brain():
    modules = []

    for file in os.listdir(CURRENT_DIR):
        if file.endswith(".py") and not file.startswith(("V.I.C.T.O.R.", "self_assembler")):
            full_path = os.path.join(CURRENT_DIR, file)
            with open(full_path, "r", encoding="utf-8", errors="ignore") as f:
                content = f.read()

            category = classify_module(file, content)
            entry = detect_entry_point(content)
            module_info = {
                "filename": file,
                "category": category,
                "entry_point": entry
            }
            modules.append(module_info)

    # Select 1 per essential category
    categories_used = {}
    for mod in modules:
        if mod['category'] not in categories_used:
            categories_used[mod['category']] = mod

    # Start writing victor_brain_v1.py
    lines = [
        "# Auto-generated by self_assembler.py",
        "# Victor Brain v1.0",
        ""
    ]

    for cat, mod in categories_used.items():
        modname = mod['filename'].replace('.py', '')
        import_line = f"from {modname} import {mod['entry_point']} as {cat}_{mod['entry_point']}"
        lines.append(import_line)

    lines.append("\n# Initialize Components\n")

    for cat, mod in categories_used.items():
        init_line = f"{cat} = {cat}_{mod['entry_point']}()"
        lines.append(init_line)

    lines.append("""
def main():
    print("[ðŸ§ ] Victor Brain Online")
    # Add recursive or runtime loop logic here
    pass

if __name__ == '__main__':
    main()
""")

    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))

    print(f"[âœ“] Victor brain built successfully to {OUTPUT_FILE}")

if __name__ == '__main__':
    build_brain()


# === AUTO-EXPAND HOOK ===
def expand():
    print(f'[AUTO_EXPAND] Module {__file__} has no custom logic. Placeholder activated.')
